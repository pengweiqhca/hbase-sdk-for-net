//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package org.apache.hadoop.hbase.rest.protobuf.generated;

message Version {
  string stargateVersion = 1;
  string jvmVersion = 2;
  string osVersion = 3;
  string serverVersion = 4;
  string jerseyVersion = 5;
}

message StorageClusterStatus {
  message Region {
    bytes name = 1;
    int32 stores = 2;
    int32 storefiles = 3;
    int32 storefileSizeMB = 4;
    int32 memstoreSizeMB = 5;
    int32 storefileIndexSizeMB = 6;
  }
  message Node {
    string name = 1;    // name:port
    int64 startCode = 2;
    int32 requests = 3;
    int32 heapSizeMB = 4;
    int32 maxHeapSizeMB = 5;
    repeated Region regions = 6;
  }
  // node status
  repeated Node liveNodes = 1;
  repeated string deadNodes = 2;
  // summary statistics
  int32 regions = 3;
  int32 requests = 4;
  double averageLoad = 5;
}

message TableList {
  repeated string name = 1;
}

message TableInfo {
  string name = 1;
  message Region {
    string name = 1;
    bytes startKey = 2;
    bytes endKey = 3;
    int64 id = 4;
    string location = 5;
  }
  repeated Region regions = 2;
}

message TableSchema {
  string name = 1;
  message Attribute {
    string name = 1;
    string value = 2;
  }
  repeated Attribute attrs = 2;
  repeated ColumnSchema columns = 3;
  // helpful encodings of commonly used attributes
  bool inMemory = 4;
  bool readOnly = 5;
}

message ColumnSchema {
  string name = 1;
  message Attribute {
    string name = 1;
    string value = 2;
  }
  repeated Attribute attrs = 2;
  // helpful encodings of commonly used attributes
  int32 ttl = 3;
  int32 maxVersions = 4;
  string compression = 5;
}

message Cell {
  bytes row = 1;       // unused if Cell is in a CellSet
  bytes column = 2;
  int64 timestamp = 3;
  bytes data = 4;
}

message CellSet {
  message Row {
    bytes key = 1;
    repeated Cell values = 2;
  }
  repeated Row rows = 1;
}

message CellSets {
	repeated CellSet sets = 1;
}

message Scanner {
  bytes startRow = 1;
  bytes endRow = 2;
  repeated bytes columns = 3;
  int32 batch = 4;
  int64 startTime = 5;
  int64 endTime = 6;
}
